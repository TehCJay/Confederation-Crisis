# This character is a subordinate of their liege and violating an order is outright illegal
is_subordinate_trigger = {
	OR = {
		AND = {
			is_landed = yes
			primary_title = { has_law = succ_appointment }
		}
		has_minor_title = title_commander
		is_councillor = yes
	}
}

is_fleet_title_trigger = {
	OR = {
		title = k_terran_navy
		title = d_terran_first_fleet
		title = d_terran_second_fleet
		title = d_terran_third_fleet
		title = d_terran_fourth_fleet
		title = d_terran_fifth_fleet
		title = d_terran_commonwealth_fleet
		title = d_xingjie_fleet
		title = d_tierra_celeste_fleet
		title = d_al_samawat_fleet
		title = d_zenye_nyota_angani_fleet
		title = d_frontier_fleet
		title = d_centauri_reach_fleet
		title = d_helix_fleet
		title = d_xin_zizhiqu_fleet
		title = d_novyy_edem_fleet
		title = d_witchhead_nebula_fleet
		title = d_avalon_fleet
		title = d_jion_fleet
		title = d_orion_reach_fleet
		title = d_strugatsky_fleet
		title = d_tarka_fleet
		title = d_bianjiang_fleet
		title = d_veil_nebula_fleet
		title = d_new_frontier_fleet
		title = d_flame_nebula_fleet
		title = d_orion_nebula_fleet
		title = d_horsehead_nebula_fleet
		title = d_mukta_duniya_fleet
		title = d_paraiso_fleet
		title = k_xingjie_navy
		title = d_xingjie_first_fleet
		title = d_xingjie_second_fleet
		title = d_xingjie_third_fleet
		title = d_xingjie_fourth_fleet
		title = d_xingjie_fifth_fleet
		title = k_tierra_celeste_navy
		title = d_tierra_celeste_first_fleet
		title = d_tierra_celeste_second_fleet
		title = d_tierra_celeste_third_fleet
		title = d_tierra_celeste_fourth_fleet
		title = d_tierra_celeste_fifth_fleet
		title = k_al_samawat_navy
		title = d_al_samawat_first_fleet
		title = d_al_samawat_second_fleet
		title = d_al_samawat_third_fleet
		title = d_al_samawat_fourth_fleet
		title = d_al_samawat_fifth_fleet
		title = k_angani_navy
		title = d_angani_first_fleet
		title = d_angani_second_fleet
		title = d_angani_third_fleet
		title = d_angani_fourth_fleet
		title = d_angani_fifth_fleet
		title = k_frontier_navy
		title = d_frontier_first_fleet
		title = d_frontier_second_fleet
		title = d_frontier_third_fleet
		title = d_frontier_fourth_fleet
		title = d_frontier_fifth_fleet
		title = k_centauri_navy
		title = d_centauri_first_fleet
		title = d_centauri_second_fleet
		title = d_centauri_third_fleet
		title = d_centauri_fourth_fleet
		title = d_centauri_fifth_fleet
		title = k_xin_zizhiqu_navy
		title = d_xin_zizhiqu_first_fleet
		title = d_xin_zizhiqu_second_fleet
		title = d_xin_zizhiqu_third_fleet
		title = d_xin_zizhiqu_fourth_fleet
		title = d_xin_zizhiqu_fifth_fleet
		title = k_helix_navy
		title = d_helix_first_fleet
		title = d_helix_second_fleet
		title = d_helix_third_fleet
		title = d_helix_fourth_fleet
		title = d_helix_fifth_fleet
		title = k_novyy_edem_navy
		title = d_novyy_edem_first_fleet
		title = d_novyy_edem_second_fleet
		title = d_novyy_edem_third_fleet
		title = d_novyy_edem_fourth_fleet
		title = d_novyy_edem_fifth_fleet
		title = k_witchhead_navy
		title = d_witchhead_first_fleet
		title = d_witchhead_second_fleet
		title = d_witchhead_third_fleet
		title = d_witchhead_fourth_fleet
		title = d_witchhead_fifth_fleet
		title = k_avalon_navy
		title = d_avalon_first_fleet
		title = d_avalon_second_fleet
		title = d_avalon_third_fleet
		title = d_avalon_fourth_fleet
		title = d_avalon_fifth_fleet
		title = k_jion_navy
		title = d_jion_first_fleet
		title = d_jion_second_fleet
		title = d_jion_third_fleet
		title = d_jion_fourth_fleet
		title = d_jion_fifth_fleet
		title = k_orion_reach_navy
		title = d_orion_reach_first_fleet
		title = d_orion_reach_second_fleet
		title = d_orion_reach_third_fleet
		title = d_orion_reach_fourth_fleet
		title = d_orion_reach_fifth_fleet
		title = k_tarka_navy
		title = d_tarka_first_fleet
		title = d_tarka_second_fleet
		title = d_tarka_third_fleet
		title = d_tarka_fourth_fleet
		title = d_tarka_fifth_fleet
		title = k_strugatsky_navy
		title = d_strugatsky_first_fleet
		title = d_strugatsky_second_fleet
		title = d_strugatsky_third_fleet
		title = d_strugatsky_fourth_fleet
		title = d_strugatsky_fifth_fleet
		title = k_bianjiang_navy
		title = d_bianjiang_first_fleet
		title = d_bianjiang_second_fleet
		title = d_bianjiang_third_fleet
		title = d_bianjiang_fourth_fleet
		title = d_bianjiang_fifth_fleet
		title = k_veil_nebula_navy
		title = d_veil_nebula_first_fleet
		title = d_veil_nebula_second_fleet
		title = d_veil_nebula_third_fleet
		title = d_veil_nebula_fourth_fleet
		title = d_veil_nebula_fifth_fleet
		title = k_new_frontier_navy
		title = d_new_frontier_first_fleet
		title = d_new_frontier_second_fleet
		title = d_new_frontier_third_fleet
		title = d_new_frontier_fourth_fleet
		title = d_new_frontier_fifth_fleet
		title = k_flame_nebula_navy
		title = d_flame_nebula_first_fleet
		title = d_flame_nebula_second_fleet
		title = d_flame_nebula_third_fleet
		title = d_flame_nebula_fourth_fleet
		title = d_flame_nebula_fifth_fleet
		title = k_orion_nebula_navy
		title = d_orion_nebula_first_fleet
		title = d_orion_nebula_second_fleet
		title = d_orion_nebula_third_fleet
		title = d_orion_nebula_fourth_fleet
		title = d_orion_nebula_fifth_fleet
		title = k_horsehead_nebula_navy
		title = d_horsehead_nebula_first_fleet
		title = d_horsehead_nebula_second_fleet
		title = d_horsehead_nebula_third_fleet
		title = d_horsehead_nebula_fourth_fleet
		title = d_horsehead_nebula_fifth_fleet
		title = k_mukta_duniya_navy
		title = d_mukta_duniya_first_fleet
		title = d_mukta_duniya_second_fleet
		title = d_mukta_duniya_third_fleet
		title = d_mukta_duniya_fourth_fleet
		title = d_mukta_duniya_fifth_fleet
		title = k_paraiso_navy
		title = d_paraiso_first_fleet
		title = d_paraiso_second_fleet
		title = d_paraiso_third_fleet
		title = d_paraiso_fourth_fleet
		title = d_paraiso_fifth_fleet
	}
}

is_pressurized_trigger = {
	NOT = { has_building = ca_environment_1 }
	NOT = { has_building = ct_environment_1 }
	NOT = { has_building = tp_environment_1 }
}
is_investiture_comp = {
	OR = {
		religion = terran_imperial
		religion = orthodox
		religion = cyberneticist
		religion = machine_cultist
	}
}


emf_laws_crownlaw_title_limited_ca_plus_trigger = {
	custom_tooltip = {
		text = emf_laws_ctt_crownlaw_title_limited_ca_plus
		hidden_tooltip = {
			crownlaw_title = {
				OR = {
					has_law = centralization_1
					has_law = centralization_2
					has_law = centralization_3
					has_law = centralization_4
				}
			}
		}
	}
}
emf_laws_crownlaw_title_medium_ca_plus_trigger = {
	custom_tooltip = {
		text = emf_laws_ctt_crownlaw_title_medium_ca_plus
		hidden_tooltip = {
			crownlaw_title = {
				OR = {
					has_law = centralization_2
					has_law = centralization_3
					has_law = centralization_4
				}
			}
		}
	}
}
emf_laws_crownlaw_title_high_ca_plus_trigger = {
	custom_tooltip = {
		text = emf_laws_ctt_crownlaw_title_high_ca_plus
		hidden_tooltip = {
			crownlaw_title = {
				OR = {
					has_law = centralization_3
					has_law = centralization_4
				}
			}
		}
	}
}
emf_laws_holder_has_late_adminstration_plus_trigger = {
	custom_tooltip = {
		text = emf_laws_ctt_holder_has_late_adminstration_plus_raw
		hidden_tooltip = {
			holder_scope = {
				primary_title = {
					OR = {
						has_law = late_feudal_administration
						has_law = imperial_administration
					}
				}
			}
		}
	}
}

# A lot nicer-looking to the user than the direct-coded version
emf_laws_change_succ_prestige_cost_trigger = {
	OR = {
		custom_tooltip = {
			text = emf_laws_ctt_baron_tier_and_requires_125_prestige_cost
			hidden_tooltip = {
				tier = BARON
				holder_scope = { prestige = 125 }
			}
		}
		custom_tooltip = {
			text = emf_laws_ctt_count_tier_and_requires_250_prestige_cost
			hidden_tooltip = {
				tier = COUNT
				holder_scope = { prestige = 250 }
			}
		}
		custom_tooltip = {
			text = emf_laws_ctt_duke_tier_and_requires_500_prestige_cost
			hidden_tooltip = {
				tier = DUKE
				holder_scope = { prestige = 500 }
			}
		}
		custom_tooltip = {
			text = emf_laws_ctt_king_tier_and_requires_750_prestige_cost
			hidden_tooltip = {
				tier = KING
				holder_scope = { prestige = 750 }
			}
		}
		custom_tooltip = {
			text = emf_laws_ctt_emperor_tier_and_requires_1000_prestige_cost
			hidden_tooltip = {
				tier = EMPEROR
				holder_scope = { prestige = 1000 }
			}
		}
	}
}

# Vassals are almost (always) upset by a succession law change; these are the ones that are affected:
emf_laws_change_succ_affected_vassal_trigger = {
	OR = {
		event_target:emf_succ_title = {
			OR = {
				is_primary_holder_title = yes
				is_titular = yes
			}
		}
		capital_holding = { de_jure_liege_or_above = event_target:emf_succ_title }
	}
}

# The succession law change reactions of the new heir, former heir, new pretenders, and former pretenders are all handled
# by event and thus the succ_adopt_* effects should skip these characters in its blanket opinion effects. Note that we
# don't use this for elective-style succession laws, because the new heir and pretenders will not really be valid for a bit,
# and even so, it's subject to rapid change.
emf_laws_change_succ_vip_trigger = {
	OR = {
		character = event_target:emf_heir
		character = event_target:emf_former_heir
		reverse_has_opinion_modifier = { who = event_target:emf_succ_changer modifier = opinion_succ_former_pretender }
		any_pretender_title = { title = event_target:emf_succ_title }
	}
}

# Additionally, as the succ_adopt_* effects hand-out blanket opinions, they do so in order of priority, and they mark each
# "already reacted to this succession law change" character as they go with flags.
#
# Note that we distinguish the types of succession change reaction so that we may know which opinion modifier we've added
# from the character to the succession law changer _for this law change only_ so that actual opinions may properly stack from
# past reactions to law changes (alternative would be to check for the modifiers themselves, but that would not allow
# coherent stacking across multiple law changes by the same ruler).
emf_laws_change_succ_reaction_trigger = {
	OR = {
		has_character_flag = emf_mild_reaction
		has_character_flag = emf_bad_reaction
		has_character_flag = emf_good_reaction
		has_character_flag = emf_bad2_reaction
	}
}


# Used for most regular succession laws as PART of the potential. It's NOT common to every major succession type (e.g.,
# primogeniture and turkish succession don't use it); it's just a convenience to clarify the succession laws code.
emf_laws_succ_basic_potential_trigger = {
	holder_scope = {
		NOT = { religion_group = muslim }
		OR = {
			independent = yes
			NOR = {
				any_liege = { holy_order = yes }
				any_demesne_title = { is_vice_royalty = yes }
			}
		}
	}
	is_primary_type_title = no
	is_vice_royalty = no
}

aggressive_check = {
	OR = {
		trait = ambitious
		trait = envious
		trait = wroth
		trait = proud
		trait = brave
		trait = reckless
		trait = ruthless
		trait = warlord
		trait = greedy
		trait = radical
		trait = adventurer
		trait = cartographer
		trait = gamer
		trait = strategist
	}
}

# Scripted triggers for adventurer events

# THIS = title, ROOT = adventurer
plus_valid_adv_target_title_trigger = {
	has_holder = yes
	is_titular = no
	is_landless_type_title = no
	higher_tier_than = BARON
	# Either Duke+ tier or it's their primary title
	OR = {
		higher_tier_than = COUNT
		is_primary_holder_title = yes
	}
	# Weak claims only allowed against women/regencies/uncrowned unless claimant is ambitious
	OR = {
		ROOT = { has_strong_claim = PREV }
		holder_scope = { is_female = yes }
		holder_scope = { has_regent = yes }
		holder_scope = { trait = uncrowned }
		ROOT = { trait = ambitious }
		ROOT = { has_character_flag = event_adventurer }
	}
	# Female claimants must be ambitious and can only target non-agnatic titles
	OR = {
		ROOT = { has_character_flag = event_adventurer }
		AND = {
			ROOT = { is_female = no }
			NOT = { has_law = enatic_succession }
		}
		AND = {
			ROOT = { is_female = yes }
			ROOT = { trait = ambitious }
			NOT = { has_law = agnatic_succession }
		}
	}
	# Title holder must qualify
	holder_scope = {
		independent = yes
		demesne_size = 1
		# Not held by theocracy unless not of the claimant's religion
		OR = {
			is_theocracy = no
			NOT = { religion = ROOT }
		}
		# Cannot target nomads for their clan title or primary title
		NAND = {
			government = nomadic_government
			OR = {
				clan_title = { title = PREVPREV }
				primary_title = { title = PREVPREV }
			}
		}
		# Cannot target merchant republics unless their capital is not de jure
		OR = {
			is_merchant_republic = no
			NOT = { capital_holding = { de_jure_liege_or_above = PREVPREV } }
		}
		# Cannot target close relatives unless they are hated or the claimant is a bastard
		OR = {
			NOT = { reverse_opinion = { who = ROOT value = -25 } }
			NOT = { is_close_relative = ROOT }
			ROOT = { trait = bastard }
		}
		NOR = {
			in_revolt = yes
			any_liege = { in_revolt = yes }
			any_spouse = { character = ROOT }
			reverse_opinion = { who = ROOT value = 25 }
			has_character_modifier = holy_truce_timer
			has_character_modifier = adventurer_target_timer
			has_any_opinion_modifier = opinion_targeted_by_adventurer
		}
	}
}

# THIS = adventurer
plus_valid_adventurer_trigger = {
	has_character_modifier = planning_claimant_adventure
	NOR = {
		prisoner = yes
		trait = incapable
		any_demesne_title = { adventurer = no }
	}
	any_opinion_modifier_target = {
		independent = yes
		demesne_size = 1
		has_opinion_modifier = { who = PREV modifier = opinion_targeted_by_adventurer }
		reverse_has_opinion_modifier = { who = PREV modifier = opinion_claimant_adventure_target }
		any_demesne_title = { claimed_by = PREVPREV }
	}
}

# ROOT = adventurer
plus_adventurer_can_approach_trigger = {
	is_playable = yes
	num_of_count_titles = 1
	capital_scope = {
		NOT = { distance = { where = event_target:adventurer_origin value = 750 } }
	}
	OR = {
		religion = ROOT
		AND = {
			religion_group = ROOT
			NOT = { religion_group = muslim }
			NOT = { religion_group = pagan_group }
		}
	}
	OR = {
		independent = yes
		liege = {
			OR = {
				reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
				reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
			}
		}
	}
	NOR = {
		is_heresy_of = ROOT
		is_parent_religion = ROOT
		character = event_target:adventurer_target
		is_liege_or_above = event_target:adventurer_target
		reverse_has_opinion_modifier = { who = ROOT modifier = turned_adventurer_away }
		reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
		reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
		reverse_has_opinion_modifier = { who = ROOT modifier = betrayed_adventurer }
	}
	OR = {
		any_demesne_province = {
			NOT = { has_province_modifier = adventurer_recruited }
		}
		any_vassal = {
			is_playable = yes
			num_of_count_titles = 1
			OR = {
				religion = ROOT
				AND = {
					religion_group = ROOT
					NOT = { religion_group = muslim }
					NOT = { religion_group = pagan_group }
				}
			}
			NOR = {
				is_heresy_of = ROOT
				is_parent_religion = ROOT
				character = event_target:adventurer_target
				is_liege_or_above = event_target:adventurer_target
				reverse_has_opinion_modifier = { who = ROOT modifier = turned_adventurer_away }
				reverse_has_opinion_modifier = { who = ROOT modifier = let_adventurer_stay }
				reverse_has_opinion_modifier = { who = ROOT modifier = backed_adventurer }
				reverse_has_opinion_modifier = { who = ROOT modifier = betrayed_adventurer }
			}
		}
	}
}

# ROOT = adventurer
plus_common_cause_trigger = {
	OR = {
		is_close_relative = ROOT
		opinion = { who = ROOT value = 40 }
		NOT = { opinion = { who = event_target:adventurer_target value = -40 } }
		war_with = event_target:adventurer_target
	}
}

# ROOT = adventurer
plus_likes_adventurer_target_trigger = {
	opinion = { who = event_target:adventurer_target value = -20 }
	OR = {
		is_close_relative = event_target:adventurer_target
		dynasty = event_target:adventurer_target
		opinion = { who = event_target:adventurer_target value = 40 }
	}
}

# ROOT = adventurer
plus_not_bad_candidate_trigger = {
	opinion = { who = ROOT value = -20 }
	OR = {
		opinion = { who = ROOT value = 0 }
		NOT = { intrigue = 8 }
		trait = honest
		trait = kind
		NOR = {
			trait = deceitful
			trait = ambitious
			trait = cruel
			is_allied_with = event_target:adventurer_target
		}
		has_truce = event_target:adventurer_target
		war_with = event_target:adventurer_target
		is_rival = event_target:adventurer_target
		is_friend = ROOT
	}
}

# ROOT = adventuer, THIS = approached liege
plus_closest_to_adventurer_trigger = {
	capital_scope = {
		NOT = { distance = { where = event_target:adventurer_location value = 75 } }
	}
}

# ROOT = adventuer, THIS = approached liege
plus_close_to_adventurer_trigger = {
	capital_scope = {
		distance = { where = event_target:adventurer_location value = 75 }
		NOT = { distance = { where = event_target:adventurer_location value = 125 } }
	}
}

# ROOT = adventuer, THIS = approached liege
plus_not_close_to_adventurer_trigger = {
	capital_scope = {
		distance = { where = event_target:adventurer_location value = 125 }
		NOT = { distance = { where = event_target:adventurer_location value = 200 } }
	}
}

# ROOT = adventuer, THIS = approached liege
plus_far_from_adventurer_trigger = {
	capital_scope = {
		distance = { where = event_target:adventurer_location value = 200 }
		NOT = { distance = { where = event_target:adventurer_location value = 300 } }
	}
}

# ROOT = adventuer, THIS = approached liege
plus_furthest_from_adventurer_trigger = {
	capital_scope = {
		distance = { where = event_target:adventurer_location value = 300 }
		NOT = { distance = { where = event_target:adventurer_location value = 450 } }
	}
}

# ROOT = approached liege, FROM = adventurer
plus_adventurer_can_approach_vassal_trigger = {
	wealth = 10
	is_adult = yes
	prisoner = no
	OR = {
		dynasty = FROM
		is_close_relative = FROM
		any_spouse = { is_close_relative = FROM }
		opinion = { who = FROM value = 40 }
		NOT = { opinion = { who = event_target:adventurer_target value = -40 } }
	}
	NOR = {
		trait = incapable
		reverse_has_opinion_modifier = { who = FROM modifier = turned_adventurer_away }
		reverse_has_opinion_modifier = { who = FROM modifier = let_adventurer_stay }
		reverse_has_opinion_modifier = { who = FROM modifier = backed_adventurer }
		reverse_has_opinion_modifier = { who = FROM modifier = betrayed_adventurer }
		reverse_has_opinion_modifier = { who = FROM modifier = refused_adventurer }
	}
}

# ROOT = duchy adventurer, THIS = target
plus_duchy_target_trigger = {
	OR = {
		is_theocracy = no
		NOT = { religion = ROOT }
	}
	NOR = {
		in_revolt = yes
		same_realm = ROOT
		dynasty = ROOT
		any_spouse = { character = ROOT }
		reverse_opinion = { who = ROOT value = 25 }
		has_any_opinion_modifier = opinion_targeted_by_adventurer
	}
}

# Scripted triggers for PlusFaction, prefixed by 'pf_'

pf_leader_trigger = {
	OR = {
		leads_faction = faction_court
		leads_faction = faction_prosperity
		leads_faction = faction_glory
		leads_faction = faction_tradition
	}
}

pf_member_trigger = {
	OR = {
		in_faction = faction_court
		in_faction = faction_prosperity
		in_faction = faction_glory
		in_faction = faction_tradition
	}
}

pf_war_trait_trigger = {
	OR = {
		trait = pf_rebel
		trait = pf_loyalist
		trait = pf_neutral
	}
}

pf_war_flag_trigger = {
	OR = {
		has_character_flag = faction_court_war
		has_character_flag = faction_prosperity_war
		has_character_flag = faction_glory_war
		has_character_flag = faction_tradition_war
		has_character_flag = faction_pretender_war
		has_character_flag = faction_separatist_war
		has_character_flag = faction_religious_war
		has_character_flag = faction_succession_war
		has_character_flag = faction_authority_war
	}
}

pf_has_demands_trigger = {
	OR = {
		has_character_flag = demands_lower_CA
		has_character_flag = demands_lower_TO
		has_character_flag = demands_surrender_title
		has_character_flag = demands_share_wealth
		has_character_flag = demands_revert_succession
		has_character_flag = demands_council_life_terms
		has_character_flag = demands_lower_feudal_obligations
		has_character_flag = demands_lower_tribal_obligations
		has_character_flag = demands_lower_city_obligations
		has_character_flag = demands_lower_temple_obligations
		has_character_flag = demands_seniority
		has_character_flag = demands_primogeniture
		has_character_flag = demands_gavelkind
		has_character_flag = demands_feudal_elective
	}
}

pf_not_regular_faction_war_trigger = {
	OR = {
		has_character_flag = demands_seniority
		has_character_flag = demands_primogeniture
		has_character_flag = demands_gavelkind
		has_character_flag = demands_feudal_elective
		has_character_flag = preparing_claimant_faction_war
		has_character_flag = preparing_religious_faction_war
	}
}

# Not to be confused with "part of this revolt": this is the `in_revolt = yes`
# equivalent for PF revolts (only)
pf_in_revolt_trigger = {
	in_revolt = yes
	any_opinion_modifier_target = {
		has_opinion_modifier = { who = PREV modifier = revolting_against_me }
		any_war = {
			defender = { character = PREV }
			attacker = {
				OR = {
					character = PREVPREVPREV
					is_vassal_or_below = PREVPREVPREV
				}
			}
			OR = {
				using_cb = cb_faction_overthrow_ruler
				using_cb = claim_on_liege_plot
				using_cb = other_claim_on_liege_plot
				using_cb = religious_overthrow_ruler
				using_cb = cb_faction_independence
			}
		}
	}
}

# used inside of an any_faction_backer scope (typically), PREV is assumed to be
# faction leader
pf_my_faction_backer_trigger = {
	NOT = { character = PREV }
	OR = {
		AND = {
			PREV = { leads_faction = faction_court }
			in_faction = faction_court
		}
		AND = {
			PREV = { leads_faction = faction_prosperity }
			in_faction = faction_prosperity
		}
		AND = {
			PREV = { leads_faction = faction_glory }
			in_faction = faction_glory
		}
		AND = {
			PREV = { leads_faction = faction_tradition }
			in_faction = faction_tradition
		}
	}
}

# used inside of an any_vassal scope (typically), ROOT is assumed to be
# faction leader. identical to pf_my_faction_backer_trigger except that
# ROOT is assumed to be the faction leader and not necessarily PREV.
# [ see, this is why it'd be great if scripted triggers and effects could
#   optionally take a scope / target as a right-hand-side parameter too! ]
pf_root_faction_backer_trigger = {
	NOT = { character = ROOT }
	OR = {
		AND = {
			ROOT = { leads_faction = faction_court }
			in_faction = faction_court
		}
		AND = {
			ROOT = { leads_faction = faction_prosperity }
			in_faction = faction_prosperity
		}
		AND = {
			ROOT = { leads_faction = faction_glory }
			in_faction = faction_glory
		}
		AND = {
			ROOT = { leads_faction = faction_tradition }
			in_faction = faction_tradition
		}
	}
}

# used inside of an any_vassal scope (typically), event_target:faction_leader is assumed to be
# faction leader (and must be saved first). identical to pf_my_faction_backer_trigger except that
# event_target:faction_leader is assumed to be the faction leader and not necessarily PREV.
# [ see, this is why it'd be great if scripted triggers and effects could
#   optionally take a scope / target as a right-hand-side parameter too! ]
pf_event_target_faction_backer_trigger = {
	NOT = { character = event_target:faction_leader }
	OR = {
		AND = {
			event_target:faction_leader = { leads_faction = faction_court }
			in_faction = faction_court
		}
		AND = {
			event_target:faction_leader = { leads_faction = faction_prosperity }
			in_faction = faction_prosperity
		}
		AND = {
			event_target:faction_leader = { leads_faction = faction_glory }
			in_faction = faction_glory
		}
		AND = {
			event_target:faction_leader = { leads_faction = faction_tradition }
			in_faction = faction_tradition
		}
	}
}

# see above (redundancy, be gone!)
pf_from_faction_backer_trigger = {
	OR = {
		AND = {
			FROM = { leads_faction = faction_court }
			in_faction = faction_court
		}
		AND = {
			FROM = { leads_faction = faction_prosperity }
			in_faction = faction_prosperity
		}
		AND = {
			FROM = { leads_faction = faction_glory }
			in_faction = faction_glory
		}
		AND = {
			FROM = { leads_faction = faction_tradition }
			in_faction = faction_tradition
		}
	}
}


pf_my_faction_angry_trigger = {
	OR = {
		AND = {
			leads_faction = faction_court
			liege = { has_character_flag = faction_court_angry }
		}
		AND = {
			leads_faction = faction_prosperity
			liege = { has_character_flag = faction_prosperity_angry }
		}
		AND = {
			leads_faction = faction_glory
			liege = { has_character_flag = faction_glory_angry }
		}
		AND = {
			leads_faction = faction_tradition
			liege = { has_character_flag = faction_tradition_angry }
		}
	}
}


pf_councillor_court_trigger = {
	any_voter = { in_faction = faction_court }
}

pf_councillor_prosperity_trigger = {
	any_voter = { in_faction = faction_prosperity }
}

pf_councillor_glory_trigger = {
	any_voter = { in_faction = faction_glory }
}

pf_councillor_tradition_trigger = {
	any_voter = { in_faction = faction_tradition }
}


pf_tradition_approved_war_trigger = {
	any_war = {
		OR = {
			AND = {
				any_attacker = { character = PREVPREV }
				OR = {
					using_cb = crusade
					using_cb = holy_war
					using_cb = excommunicated_ruler
					using_cb = depose_antipope
				}
			}
			AND = {
				any_defender = { character = PREVPREV }
				attacker = { NOT = { religion = PREVPREV } }
				OR = {
					using_cb = tribal_invasion
					using_cb = crusade
					using_cb = holy_war
					using_cb = viking_invasion
					using_cb = pagan_county_conquest
					using_cb = shia_caliphate_rising
					using_cb = manifest_destiny_invasion
					using_cb = tributary_cb
					using_cb = nomad_invasion
				}
			}
		}
	}
}

# NOTE: This trigger can't support multiple simultaneous PF civil wars coherently until an extra layer of semantic relation
# tracking is added to PF. Ergo, one should make sure that there cannot be multiple such wars until such is (re-)added.
pf_part_of_this_revolt_trigger = {
	reverse_has_opinion_modifier = { who = PREV modifier = revolting_against_me }
}

pf_pending_civil_war_trigger = {
	liege = {
		any_vassal = {
			has_character_flag = civil_war_faction_leader
		}
	}
}
#	Example:
#
#	example_trigger = {
#		year = 1066
#		num_of_spouses = 2
#	}
#
#
#	In a script file:
#
#	trigger = {
#		exampel_trigger = yes
#	}
#
# Naming convention:  xxxx_trigger
#

ai_not_busy_trigger = {
	OR = {
		ai = no
		NOR = {
			has_character_modifier = holding_epic_tournament
			has_character_modifier = holding_nomad_wargames
			trait = on_pilgrimage
			trait = on_hajj
		}
	}
}


# Test triggers
is_feudal_trigger = {
	religion = neo_feudal
}
is_flagged_republic_trigger = {
	has_character_flag = flag_military_republic
}

# Ideology Class Checks
is_democratic_trigger = {
	OR = {
		religion = terran_federalist
		religion = terran_republican
		religion = colonial_separatist
	}
}
is_autocratic_trigger = {
	OR = {
		religion = terran_imperial
		religion = neo_feudal
		religion = astrist
		religion = bio_directionist
		religion = imperial_cult
	}
}
is_theocratic_trigger = {
	OR = {
		religion = neo_socialist
		religion = orthodox
		religion = solarian
		religion = xenoterran
		religion = cyberneticist
		religion = machine_cultist
		religion = pilgrim
		religion = solar_cultist
		religion = adoptionist
		religion = adoptionist_cultist
	}
}


is_eligible_merchant_trigger = {
	OR = {
		AND = {
			is_patrician = yes
			OR = {
				liege_before_war = {
					NOT = { character = PREV }
					is_merchant_republic = yes
					NOT = {
						liege_before_war = {
							NOT = { character = PREV }
							is_merchant_republic = yes
						}
					}
				}
				has_game_started = no
			}
		}
		AND = {
			higher_real_tier_than = count
			any_demesne_province = {
				always = yes
			}
			NOT = {
				liege_before_war = {
					NOT = { character = PREV }
					is_merchant_republic = yes
				}
			}
		}
	}
}
military_monarchy_is_legal_trigger = {
	custom_tooltip = {
		text = "MILITARYMONARCHYLEGAL"
		trigger_if = {
			limit = { independent = no }

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = military_vassal_legitimacy_0 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}
military_republic_is_legal_trigger = {
	custom_tooltip = {
		text = "MILITARYREPUBLICLEGAL"
		trigger_if = {
			limit = { independent = no }

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = military_vassal_legitimacy_1 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}
military_directorate_is_legal_trigger = {
	custom_tooltip = {
		text = "MILITARYDIRECTORATELEGAL"
		trigger_if = {
			limit = {
				independent = no
				liege = {
					NOT = { government = military_directorate }
				}
			}

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = military_vassal_legitimacy_2 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}
corporate_monarchy_is_legal_trigger = {
	custom_tooltip = {
		text = "CORPORATEMONARCHYLEGAL"
		trigger_if = {
			limit = {
				independent = no
				liege = {
					NOT = { government = corporate_monarchy }
				}
			}

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = republic_vassal_legitimacy_0 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}
corporate_republic_is_legal_trigger = {
	custom_tooltip = {
		text = "CORPORATEREPUBLICLEGAL"
		trigger_if = {
			limit = { independent = no }

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = republic_vassal_legitimacy_1 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}
corporate_directorate_is_legal_trigger = {
	custom_tooltip = {
		text = "CORPORATEDIRECTORATELEGAL"
		hidden_tooltip = {
			trigger_if = {
				limit = { independent = no }

				crownlaw_title = {
					trigger_if = {
						limit = {
							NOT = { has_law = republic_vassal_legitimacy_2 }
						}
						trigger_if = {
							limit = {
								holder_scope = { is_liege_of = ROOT }
							}
							NOR = {
								has_law = centralization_4
								has_law = centralization_3
								trigger_if = {
									limit = {
										OR = {
											PREV = { real_tier = KING }
											AND = {
												holder_scope = { real_tier = KING }
												PREV = { real_tier = DUKE }
											}
										}
									}
									has_law = centralization_2
								}
							}
						}
						trigger_else = {
							NOT = { has_law = centralization_4 }
						}
					}
				}
			}
		}
	}
}
administrative_monarchy_is_legal_trigger = {
	custom_tooltip = {
		text = "ADMINISTRATIVEMONARCHYLEGAL"

		trigger_if = {
			limit = { independent = no }

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = theocracy_vassal_legitimacy_0 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}
administrative_republic_is_legal_trigger = {
	custom_tooltip = {
		text = "ADMINISTRATIVEREPUBLICLEGAL"

		trigger_if = {
			limit = { independent = no }

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = theocracy_vassal_legitimacy_1 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}

administrative_directorate_is_legal_trigger = {
	custom_tooltip = {
		text = "ADMINISTRATIVEDIRECTORATELEGAL"

		trigger_if = {
			limit = { independent = no }

			crownlaw_title = {
				trigger_if = {
					limit = {
						NOT = { has_law = theocracy_vassal_legitimacy_2 }
					}
					trigger_if = {
						limit = {
							holder_scope = { is_liege_of = ROOT }
						}
						NOR = {
							has_law = centralization_4
							has_law = centralization_3
							trigger_if = {
								limit = {
									OR = {
										PREV = { real_tier = KING }
										AND = {
											holder_scope = { real_tier = KING }
											PREV = { real_tier = DUKE }
										}
									}
								}
								has_law = centralization_2
							}
						}
					}
					trigger_else = {
						NOT = { has_law = centralization_4 }
					}
				}
			}
		}
	}
}

monarchy_is_legal_trigger = {
	OR = {
		AND = {
			is_military_trigger = yes
			military_monarchy_is_legal_trigger = yes
		}
		AND = {
			is_civil_trigger = yes
			corporate_monarchy_is_legal_trigger = yes
		}
		AND = {
			is_rectorial_trigger = yes
			administrative_monarchy_is_legal_trigger = yes
		}
	}
}
republic_is_legal_trigger = {
	OR = {
		AND = {
			is_military_trigger = yes
			military_republic_is_legal_trigger = yes
		}
		AND = {
			is_civil_trigger = yes
			corporate_republic_is_legal_trigger = yes
		}
		AND = {
			is_rectorial_trigger = yes
			administrative_republic_is_legal_trigger = yes
		}
	}
}
directorate_is_legal_trigger = {
	OR = {
		AND = {
			is_military_trigger = yes
			military_directorate_is_legal_trigger = yes
		}
		AND = {
			is_civil_trigger = yes
			corporate_directorate_is_legal_trigger = yes
		}
		AND = {
			is_rectorial_trigger = yes
			administrative_directorate_is_legal_trigger = yes
		}
	}
}
# Other triggers
is_military_officer_trigger = {
	is_adult = yes
	OR = {
		has_job_title = job_marshal
		has_minor_title = title_commander
		AND = {
			is_ruler = yes
			is_military_trigger = yes
		}
	}
}
#Used for Terran culture conversion events
is_terran_culture_trigger = {
	culture_group = terran_group
}
is_terrancore_area_trigger = {
	region = world_core_terran
}
is_angloterran_area_trigger = {
	OR = {
		region = world_core_frontier
		region = world_periphery_northwest_avalon
		region = world_periphery_northwest_newfrontier
	}
}
is_russoterran_area_trigger = {
	OR = {
		region = world_core_centauri
		region = world_core_helix
		region = world_periphery_west_strugatsky
		region = world_periphery_west_edem
	}
}
is_hispanicterran_area_trigger = {
	OR = {
		region = world_core_celeste
		#These are temporary, Paraiso will move once I add Luso-Terran and Orion once it gets overhauled
		region = world_periphery_orion_horsehead
		region = world_periphery_orion_reach
		region = world_periphery_east_paraiso
	}
}
is_indoterran_area_trigger = {
	region = indian_culture_region
}
is_japaneseterran_area_trigger = {
	region = world_periphery_west_jion
}
is_sinoterran_area_trigger = {
	OR = {
		region = world_core_xingjie
		region = world_periphery_south_zizhiqu
		region = world_periphery_south_bianjiang
	}
}
is_germanoterran_area_trigger = {
	OR = {
		region = world_periphery_orion_flame
		region = world_periphery_orion_nebula
	}
}
is_mesoterran_area_trigger = {
	region = world_core_sexto_sol
}
is_orion_terran_area_trigger = {
	OR = {
		region = world_periphery_orion_reach
		region = world_periphery_orion_horsehead
	}
}
is_iranianterran_area_trigger = {
	region = iranian_culture_region
}
is_arabterran_area_trigger = {
	region = arab_culture_region
}
is_eastafroterran_area_trigger = {
	region = east_african_culture_region
}
is_westafroterran_area_trigger = {
	region = west_african_culture_region
}
is_ethiopianterran_area_trigger = {
	region = ethiopian_culture_region
}
is_local_terran_culture_trigger = {
	OR = {
		AND = {
			is_terrancore_area_trigger = yes
			culture = terran_terran
		}
		AND = {
			is_angloterran_area_trigger = yes
			culture = anglo_terran
		}
		AND = {
			is_russoterran_area_trigger = yes
			culture = russo_terran
		}
		AND = {
			is_hispanicterran_area_trigger = yes
			culture = hispanic_terran
		}
		AND = {
			is_indoterran_area_trigger = yes
			culture = indo_terran
		}
		AND = {
			is_japaneseterran_area_trigger = yes
			culture = japanese_terran
		}
		AND = {
			is_sinoterran_area_trigger = yes
			culture = sino_terran
		}
		AND = {
			is_germanterran_area_trigger = yes
			culture = german_terran
		}
		AND = {
			is_mesoterran_area_trigger = yes
			culture = mesoamerican_terran
		}
		AND = {
			is_orion_terran_area_trigger = yes
			culture = hispanic_terran
		}
		AND = {
			is_iranianterran_area_trigger = yes
			culture = iranian_terran
		}
		AND = {
			is_arabterran_area_trigger = yes
			culture = arab_terran
		}
		AND = {
			is_eastafroterran_area_trigger = yes
			culture = east_afro_terran
		}
		AND = {
			is_westafroterran_area_trigger = yes
			culture = west_afro_terran
		}
		AND = {
			is_ethiopianterran_area_trigger = yes
			culture = ethiopian_terran
		}
	}
}